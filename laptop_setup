#!/usr/bin/env bash
# Based on https://gist.github.com/codeinthehole/26b37efa67041e1307db

# Check for XCode, install if it doesn't exist
echo "Installing XCode..."
if test ! $(xcode-select -p)
then
    xcode-select --install
else
    echo "XCode is already installed... skipping."
fi

echo ""

# Check for Homebrew, install if we don't have it
echo "Installing Homebrew..."
if test ! $(which brew)
then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
else
    echo "Homebrew is already installed... skipping."
fi

echo ""

# # Update homebrew
echo 'Updating brew...'
brew update

echo ""

# Install Brew packages
echo "Installing brew packages..."
PACKAGES=(
    git
    nvm
    yarn
    z
    gpg
)
for PACKAGE in "${PACKAGES[@]}"
do
    if brew list $PACKAGE &>/dev/null
    then
        echo "$PACKAGE is already installed... skipping."
    else
        echo "Installing $PACKAGE...\c"
        brew install $PACKAGE > /dev/null 2>&1
        echo " done."
    fi
done

echo ""

# Install Cask apps
echo "Installing cask apps..."
CASKS=(
    # Development
    visual-studio-code
    iterm2
    postman
    postico
    # figma
    # robo-3t

    # Productivity
    slack
    obsidian

    # Media
    spotify

    # Browsers
    google-chrome
)
for CASK in "${CASKS[@]}"
do
    echo "Installing $CASK...\c"
    if brew list --cask $CASK &>/dev/null
    then
        echo " skipping."
    else
        brew install --cask $CASK > /dev/null 2>&1
        echo " done."
    fi
done

echo ""

# Install Fonts
echo "Installing fonts..."
if brew list --cask font-fira-code &>/dev/null
then
    echo "Fonts are already installed... skipping."
else
    echo "Tapping caskroom/fonts...\c"
    brew tap homebrew/cask-fonts &>/dev/null
    echo " done."
    echo "Installing font-fira-code...\c"
    brew install --cask font-fira-code &>/dev/null
    echo " done."
fi

echo ""

# Clean up
echo "Cleaning up brew...\c" 
brew cleanup &>/dev/null
echo " done."

echo ""

# Oh my zsh install
echo "Installing zsh...\c"
if test ! $(which zsh)
then
    sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    echo " done."
else
    echo " skipping."
fi

echo ""

# Install VS Code Extensions
echo 'Installing VS Code extensions...'
EXTENSIONS=(
    alefragnani.project-manager
    arcticicestudio.nord-visual-studio-code
    bradlc.vscode-tailwindcss
    christian-kohler.npm-intellisense
    dbaeumer.vscode-eslint
    eamodio.gitlens
    esbenp.prettier-vscode
    ms-vscode.vscode-typescript-next
    streetsidesoftware.code-spell-checker
    Janne252.fontawesome-autocomplete
    PKief.material-icon-theme
    yoavbls.pretty-ts-errors
    xyz.local-history
)
for EXTENSION in "${EXTENSIONS[@]}"
do
    if code --list-extensions | grep $EXTENSION &> /dev/null
    then
        echo "$EXTENSION is already installed... skipping."
    else
        echo "Installing $EXTENSION...\c"
        code --install-extension $EXTENSION &>/dev/null
        echo " done."
    fi
done

echo ""

# VS Code Settings
echo 'Copying VS Code settings...\c'
if [ ! -f $HOME/Library/Application\ Support/Code/User/settings.json ]
then
    cp vscode_settings.json $HOME/Library/Application\ Support/Code/User/settings.json
    echo " done."
else
    echo ' skipping.'
fi

echo ""

# Bash Aliases
echo "Adding bash aliases and configuration...\c"
if less ~/.zshrc | grep 'alias gco="git checkout"' &> /dev/null
then
    echo " skipping."
else
    cp .zshrc ~/.zshrc
    echo " done."
fi

echo ""

# Git configuration
echo "Configuring git...\c"
git config --global pager.branch false
git config --global user.name "Tom Nolan"
git config --global user.email "tsnolan@outlook.com"
git config --global pull.ff only
git config --global commit.gpgsign true
echo " done."

echo ""

# MacOS configuration
echo "Setting dark mode...\c"
osascript -e 'tell app "System Events" to tell appearance preferences to set dark mode to true'
echo " done."

echo ""

# Success Message
echo "Setup complete!"

# GPG Generate new key
# gpg --default-new-key-algo rsa4096 --gen-key
# gpg --list-secret-keys --keyid-format=long
# gpg --armor --export <id>
# https://docs.github.com/en/authentication/managing-commit-signature-verification/adding-a-gpg-key-to-your-github-account
